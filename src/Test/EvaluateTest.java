//package Test;
//
//import static org.junit.Assert.assertEquals;
//import static org.junit.Assert.assertTrue;
//
//import org.junit.Test;
//
//import bot.BotState;
//import field.Field;
//
//public class EvaluateTest {
//
//    /**
//     * Check this game! Could be good for evaluation testing.
//     * http://theaigames.com/competitions/ai-block-battle/games/55bc8c9935ec1d4039cf46a2
//     */
//
//    
//    @Test
//    public void Match55bc8c9935ec1d4039cf46a2(){
//	
//	BotState state = new BotState();
//	state.updateSettings("timebank", "10000");
//	state.updateSettings("time_per_move", "500");
//	state.updateSettings("player_names", "player1,player2");
//	state.updateSettings("your_bot", "player1");
//	state.updateSettings("field_height", "20");
//	state.updateSettings("field_width", "10");
//
//	state.updateState("player1", "round", "1");
//	state.updateState("player1", "this_piece_type", "J");
//	state.updateState("player1", "next_piece_type", "I");
//	state.updateState("player1", "this_piece_position", "3,-1");
//	state.updateState("player1", "row_points", "0");
//	state.updateState("player1", "combo", "0");
//	state.updateState("player1", "field", "0,0,0,1,1,1,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;" + "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;" + "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;" + "0,0,0,0,0,0,2,2,2,2;"
//		+ "0,0,0,0,0,0,0,0,2,0;" + "0,0,0,0,0,0,0,2,2,2;"
//		+ "0,0,0,2,2,2,2,2,0,0;" + "2,2,2,2,2,0,0,0,0,0;"
//		+ "3,3,3,3,3,3,3,3,3,3;" + "3,3,3,3,3,3,3,3,3,3;"
//		+ "3,3,3,3,3,3,3,3,3,3;" + "3,3,3,3,3,3,3,3,3,3;"
//		+ "3,3,3,3,3,3,3,3,3,3;" + "3,3,3,3,3,3,3,3,3,3;"
//		+ "3,3,3,3,3,3,3,3,3,3;" + "3,3,3,3,3,3,3,3,3,3;"
//		+ "3,3,3,3,3,3,3,3,3,3");
//	
//	Field bad = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "2,0,2,2,0,0,0,0,0,2;"
//		+ "2,2,2,0,2,2,2,2,0,2;"
//		+ "2,2,2,2,2,2,2,2,2,2");
//	
//	Field good = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "2,0,0,0,0,0,0,0,0,2;"
//		+ "2,2,0,0,2,2,2,2,0,2;"
//		+ "2,2,0,2,2,2,2,2,2,2");
//	
//	assertTrue(good.evaluate() > bad.evaluate());
//    }
//    
//
//    @Test
//    public void Match55b8acaa35ec1d4039cf161c(){
//	Field bad = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "2,2,2,2,0,0,0,0,0,0;"
//		+ "2,2,0,2,2,0,0,0,0,0");
//	
//	Field good = new Field(10, 20, 
//				  "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,0,0,0,0,0,0,0;"
//				+ "0,0,0,2,0,0,0,0,0,0;"
//				+ "2,2,2,2,0,0,0,0,0,0;"
//				+ "2,2,2,0,0,0,0,0,0,0");
//	
//	assertTrue(good.evaluate() > bad.evaluate());
//	
//	
//    }
//    
//    @Test
//    public void Match55bb8dfa1c687b361d5bd096(){
//	Field bad = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "2,2,0,0,0,0,0,0,0,0;"
//		+ "0,2,2,0,0,0,0,0,0,0");
//	
//	Field good = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,2,2,0;"
//		+ "0,0,0,0,0,0,0,0,2,2");
//
//	assertTrue(good.evaluate() > bad.evaluate());
//
//    }
//    
//    @Test
//    public void Match55b8b17935ec1d4039cf1658(){
//	Field bad = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "2,0,0,0,0,0,0,0,0,0;"
//		+ "2,2,0,0,0,0,0,0,0,0;"
//		+ "2,0,0,0,0,0,0,0,0,0");
//	
//	
//	Field good = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,2,0,0,0,0,0,0,0,0;"
//		+ "2,2,2,0,0,0,0,0,0,0");
//	assertTrue(good.evaluate() > bad.evaluate());
//
//    }
//    
//    
//    @Test
//    public void Match55bb912e35ec1d4039cf3a6a(){
//	Field bad = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "2,0,0,0,0,0,0,0,0,0;"
//		+ "2,0,0,0,0,0,0,0,0,0;"
//		+ "2,0,0,0,0,0,0,0,0,0;"
//		+ "2,2,0,0,0,0,0,0,0,0;"
//		+ "2,2,2,0,0,0,0,0,0,0");
//	
//	
//	Field good = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,2,0,0,0,0,0,0,0,0;"
//		+ "2,2,2,2,2,2,2,0,0,0");
//	
//	System.err.println("Good:");
//	good.evaluate();
//
//	
//	System.err.println("Bad:");
//	bad.evaluate();
//	
//	
//	assertTrue(good.evaluate() > bad.evaluate());
//
//	
//	
//	
//    }
//    @Test
//    public void Match55b88c8b35ec1d4039cf14a8(){
//	Field bad = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,2,0,0;"
//		+ "0,0,0,0,0,0,0,2,2,2");
//	
//	Field good = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "2,0,0,0,0,0,0,0,0,0;"
//		+ "2,2,2,0,0,0,0,0,0,0");
//	assertTrue(good.evaluate() > bad.evaluate());
//	
//    }
//    
//    @Test
//    public void horizontalCompactCheckerTest() {
//	Field field = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "2,2,2,2,2,0,0,0,0,0");
//	
//	Field swissField = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,2,2,2,2,0,0,0;"
//		+ "0,0,0,0,0,2,2,2,0,0;"
//		+ "2,2,2,2,2,2,0,2,2,2");
//	
////	System.out.println(field.verticalCompactChecker());
//	assertEquals(true, field.columnTransitions() < swissField.columnTransitions());
//    }
//    
//    
//    @Test
//    public void verticalCheckerTest() {
//	Field field = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,2,2,0,0,0,0,0;"
//		+ "0,0,0,2,0,0,0,0,0,0;"
//		+ "0,0,0,2,0,0,0,0,0,0;"
//		+ "0,0,0,2,2,0,0,0,0,0;"
//		+ "2,2,2,2,2,0,0,0,0,0");
//	
//	Field swissField = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,2;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,2,2,0,2,0,0,2;"
//		+ "0,0,0,2,2,2,2,2,0,0;"
//		+ "2,2,0,2,2,0,2,2,0,2");
//	
//	assertEquals(true, field.columnTransitions() < swissField.columnTransitions());
//
//    }
//    
//    
//    @Test
//    public void evaluationTest() {
//	Field bad = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,2,0,0,0,2,2,0,0;"
//		+ "2,2,2,0,0,2,2,0,0,0");
//
//	
//	Field good = new Field(10, 20, 
//		  "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,0,0,0,0,0,0,0,0,0;"
//		+ "0,2,2,0,0,0,0,0,0,0;"
//		+ "2,2,2,0,0,0,0,0,0,0;"
//		+ "2,2,2,0,0,0,0,0,0,0");
//	
//
//	assertEquals(true, good.evaluate() > bad.evaluate());
//	
//    }
//    
//  
//
//
//}
